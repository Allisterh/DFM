[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastian Krantz. Author, maintainer. Rytis Bagdziunas. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krantz S, Bagdziunas R (2022). DFM: Dynamic Factor Models. R package version 0.1.","code":"@Manual{,   title = {DFM: Dynamic Factor Models},   author = {Sebastian Krantz and Rytis Bagdziunas},   year = {2022},   note = {R package version 0.1}, }"},{"path":"/index.html","id":"dfm","dir":"","previous_headings":"","what":"Dynamic Factor Models for R","title":"Dynamic Factor Models for R","text":"DFM provides efficient estimation Dynamic Factor Models via EM Algorithm. Estimation can done 3 different ways following: Doz, C., Giannone, D., & Reichlin, L. (2011). two-step estimator large approximate dynamic factor models based Kalman filtering. Journal Econometrics, 164(1), 188-205. Doz, C., Giannone, D., & Reichlin, L. (2012). quasi-maximum likelihood approach large, approximate dynamic factor models. Review economics statistics, 94(4), 1014-1024. Banbura, M., & Modugno, M. (2014). Maximum likelihood estimation factor models datasets arbitrary pattern missing data. Journal Applied Econometrics, 29(1), 133-160. 3 estimation methods support missing data, various preprocessing options. default em.method = \"DGR\" following Doz, Giannone & Reichlin (2012). Using em.method = \"none\" generates Two-Step estimates following Doz, Giannone & Reichlin (2011). extremely efficient bigger datasets. PCA Two-Step estimates also reported EM based methods. Choosing em.method = \"BM\" adjusts EM iterations suitably allow arbitrary patterns missing data following Banbura & Modugno (2014), preferred (though least efficient) method deal missing data (particularly ragged-edges series different frequencies).","code":""},{"path":"/index.html","id":"comparison-with-other-r-packages","dir":"","previous_headings":"","what":"Comparison with Other R Packages","title":"Dynamic Factor Models for R","text":"implementation based efficient C++ code, making DFM orders magnitude faster packages MARSS can used fit dynamic factor models, packages like nowcasting nowcastDFM, fit dynamic factor models specific mixed-frequency nowcasting applications. latter two packages additionally support blocking variables different groups factors estimated, EM adjustments variables different frequencies, whereas DFM em.method = \"BM\" allow mixed-frequency data performs adjustments frequency data. DFM currently also allow residual autocorrelation estimation, although addition feature planned. DFM intended provide robust computationally efficient baseline implementation Dynamic Factor Models R, allowing straightforward application various contexts time series dimensionality reduction multivariate forecasting. package meant fit general forms state space model provided MARSS, advanced specifications Dynamic Factor Models tailored mixed-frequency nowcasting applications nowcasting nowcastDFM. software however benefit functions methods provided DFM, notably DFM exports stationary Kalman Filters Smoothers also used nowcasting applications, noticeably faster general implementations provided FKF package.","code":""},{"path":"/index.html","id":"usage-example","dir":"","previous_headings":"","what":"Usage Example","title":"Dynamic Factor Models for R","text":"","code":"library(DFM)  # Fit DFM with 6 factors and 3 lags in the transition equation mod = DFM(diff(BM14_M), r = 6, p = 3, em.method = \"BM\")  # 'dfm' methods summary(mod) plot(mod) as.data.frame(mod)  # Forecasting 20 periods ahead fc = predict(mod, h = 20)  # 'dfm_forecast' methods print(fc) plot(fc) as.data.frame(fc)"},{"path":"/reference/BM14_Models.html","id":null,"dir":"Reference","previous_headings":"","what":"EU Macroeconomic Data from Banbura and Modugno 2014 — BM14_Models","title":"EU Macroeconomic Data from Banbura and Modugno 2014 — BM14_Models","text":"data extract BM 2014 replication files. proprietary series (mostly PMI's) excluded. dataset BM14_Models provides information series inclusion 'small', 'medium' 'large' sized dynamic factor models estimated BM 2014. actual data contained xts format BM14_M monthly data BM14_Q quarterly data.","code":""},{"path":"/reference/BM14_Models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EU Macroeconomic Data from Banbura and Modugno 2014 — BM14_Models","text":"","code":"BM14_Models BM14_M BM14_Q"},{"path":"/reference/BM14_Models.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"EU Macroeconomic Data from Banbura and Modugno 2014 — BM14_Models","text":"BM14_Models data frame 101 obs. (series) 8 columns: series BM14 series code (converted snake case R) label BM14 series label code original series code data source freq series frequency log_trans logical indicating whether series transformed natural log differencing. Note data provided untransformed levels, data (log-)differenced BM14 estimation. small logical indicating series included 'small' model BM14. Proprietary series excluded. medium logical indicating series included 'medium' model BM14. Proprietary series excluded. large logical indicating series included 'large' model BM14. comprises series, thus variable redundant included completeness. Proprietary series excluded.","code":""},{"path":"/reference/BM14_Models.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"EU Macroeconomic Data from Banbura and Modugno 2014 — BM14_Models","text":"Banbura, M., & Modugno, M. (2014). Maximum likelihood estimation factor models datasets arbitrary pattern missing data. Journal Applied Econometrics, 29(1), 133-160.","code":""},{"path":"/reference/DFM.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a Dynamic Factor Model — DFM","title":"Estimate a Dynamic Factor Model — DFM","text":"Efficient estimation Dynamic Factor Model via EM Algorithm - stationary data time-invariant system matrices classical assumptions, permitting missing data.","code":""},{"path":"/reference/DFM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a Dynamic Factor Model — DFM","text":"","code":"DFM(   X,   r,   p = 1L,   ...,   rQ = c(\"none\", \"diagonal\", \"identity\"),   rR = c(\"diagonal\", \"identity\", \"none\"),   em.method = c(\"DGR\", \"BM\", \"none\"),   min.iter = 25L,   max.iter = 100L,   tol = 1e-04,   check.increased = FALSE,   max.missing = 0.8,   na.rm.method = c(\"LE\", \"all\"),   na.impute = c(\"median.ma.spline\", \"median.ma\", \"median\", \"rnorm\"),   ma.terms = 3L )"},{"path":"/reference/DFM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a Dynamic Factor Model — DFM","text":"X T x n data matrix frame. r number factors. p number lags factor VAR. ... arguments added future, estimation methods block-structures. rQ restrictions state (transition) covariance matrix (Q). rR restrictions observation (measurement) covariance matrix (R). em.method character. implementation Expectation Maximization Algorithm used. options : min.iter integer. Minimum number EM iterations (ensure convergence path). max.iter integer. Maximum number EM iterations. tol numeric. EM convergence tolerance. check.increased logical. Check likelihood increased. Passed em_converged. max.missing numeric. Proportion series missing case considered missing. na.rm.method character. Method apply concerning missing cases selected max.missing: \"LE\" removes cases beginning end sample, whereas \"\" always removes missing cases. na.impute character. Method impute missing values PCA estimates used initialize EM algorithm. Note data standardized (scaled centered) beforehand. Available options : ma.terms order (2-sided) moving average applied na.impute methods \"median.ma\" \"median.ma.spline\".","code":""},{"path":"/reference/DFM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a Dynamic Factor Model — DFM","text":"list-like object class 'dfm' following elements: \"stats\" \\(n \\times 5\\) matrix summary statistics class \"qsu\" (see qsu). \"missing\" \\(T \\times n\\) logical matrix indicating missing infinite values original data (imputed X_imp). \"attributes\" contains attributes original data input. \".list\" logical value indicating whether original data input list / data frame.","code":""},{"path":"/reference/DFM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate a Dynamic Factor Model — DFM","text":"function efficiently estimates Dynamic Factor Model following classical assumptions: Linearity Idiosynchratic measurement (observation) errors (R diagonal) direct relationship series lagged factors (ceteris paribus contemporaneous factors) relationship lagged error terms either measurement transition equation (serial correlation) Factors allowed evolve \\(VAR(p)\\) process, data standardized (scaled centered) estimation (removing need intercept terms). assumptions 1-4, translates following dynamic form: $$\\textbf{x}_t = \\textbf{C}_0 \\textbf{f}_t + \\textbf{e}_t \\tilde N(\\textbf{0}, \\textbf{R})$$ $$\\textbf{f}_t = \\sum_{=1}^p \\textbf{}_p \\textbf{f}_{t-p} + \\textbf{u}_t \\tilde N(0, \\textbf{Q}_0)$$ first equation called measurement observation equation second equation called transition, state process equation, model can estimated using classical form Kalman Filter Expectation Maximization (EM) algorithm, transforming State-Space (stacked, VAR(1)) form: $$\\textbf{x}_t = \\textbf{C} \\textbf{F}_t + \\textbf{e}_t \\tilde N(\\textbf{0}, \\textbf{R})$$ $$\\textbf{F}_t = \\textbf{F}_{t-1} + \\textbf{u}_t \\tilde N(0, \\textbf{Q})$$ ","code":""},{"path":"/reference/DFM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate a Dynamic Factor Model — DFM","text":"Doz, C., Giannone, D., & Reichlin, L. (2011). two-step estimator large approximate dynamic factor models based Kalman filtering. Journal Econometrics, 164(1), 188-205. Doz, C., Giannone, D., & Reichlin, L. (2012). quasi-maximum likelihood approach large, approximate dynamic factor models. Review economics statistics, 94(4), 1014-1024. Banbura, M., & Modugno, M. (2014). Maximum likelihood estimation factor models datasets arbitrary pattern missing data. Journal Applied Econometrics, 29(1), 133-160. Stock, J. H., & Watson, M. W. (2016). Dynamic Factor Models, Factor-Augmented Vector Autoregressions, Structural Vector Autoregressions Macroeconomics. Handbook Macroeconomics, 2, 415–525. https://doi.org/10.1016/bs.hesmac.2016.04.002","code":""},{"path":"/reference/DFM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a Dynamic Factor Model — DFM","text":"","code":"library(magrittr) library(xts) #> Loading required package: zoo #>  #> Attaching package: ‘zoo’ #> The following objects are masked from ‘package:base’: #>  #>     as.Date, as.Date.numeric library(vars) #> Loading required package: MASS #> Loading required package: strucchange #> Loading required package: sandwich #> Loading required package: urca #> Loading required package: lmtest  # BM14 Replication Data. Constructing the database: BM14 = merge(BM14_M, BM14_Q) BM14[, BM14_Models$log_trans] %<>% log() BM14[, BM14_Models$freq == \"M\"] %<>% diff() BM14[, BM14_Models$freq == \"Q\"] %<>% diff(3)   ### Small Model ---------------------------------------  # IC for number of factors IC_small = ICr(BM14[, BM14_Models$small], max.r = 5) #> Missing values detected: imputing data with tsremimpNA() with default settings plot(IC_small)  screeplot(IC_small)   # I take 2 factors. Now number of lags VARselect(IC_small$F_pca[, 1:2]) #> $selection #> AIC(n)  HQ(n)  SC(n) FPE(n)  #>      8      3      3      8  #>  #> $criteria #>                1         2           3           4           5           6 #> AIC(n) 0.4256375 0.2484074 -0.04114001 -0.04320722 -0.04321406 -0.04315230 #> HQ(n)  0.4565449 0.2999196  0.03097715  0.04951484  0.07011289  0.09077955 #> SC(n)  0.5027285 0.3768924  0.13873901  0.18806580  0.23945295  0.29090872 #> FPE(n) 1.5305683 1.2819914  0.95971392  0.95775358  0.95778063  0.95788815 #>                  7           8           9          10 #> AIC(n) -0.04217882 -0.04883749 -0.02908459 -0.03664317 #> HQ(n)   0.11235793  0.12630416  0.16666197  0.17970829 #> SC(n)   0.34327620  0.38801154  0.45915845  0.50299387 #> FPE(n)  0.95888700  0.95260885  0.97172323  0.96454159 #>   # Estimating the model with 2 factors and 3 lags dfm_small = DFM(BM14[, BM14_Models$small], 2, 3, em.method = \"BM\") #> Converged after 26 iterations.  # Inspecting the model summary(dfm_small) #> Dynamic Factor Model: n = 14, T = 356, r = 2, p = 3, %NA = 38.3628 #>  #> Call:  DFM(X = BM14[, BM14_Models$small], r = 2, p = 3, em.method = \"BM\") #>  #> Summary Statistics of Factors [F] #>       N     Mean   Median      SD      Min     Max #> f1  356   0.0777  -0.1544  2.0324  -3.2519  8.9693 #> f2  356  -0.0468   0.0279  1.3933  -5.8201  4.2683 #>  #> Factor Transition Matrix [A] #>     L1.f1   L1.f2    L2.f1   L2.f2   L3.f1    L3.f2 #> f1 1.2107 -0.1290 -0.06743  0.1059 -0.2065 0.008175 #> f2 0.3656  0.4819  0.10274 -0.2022 -0.6789 0.391439 #>  #> Factor Covariance Matrix [cov(F)] #>           f1        f2 #> f1   4.1307   -0.4890* #> f2  -0.4890*   1.9412  #>  #> Factor Transition Error Covariance Matrix [Q] #>        u1     u2 #> u1 0.2845 0.2434 #> u2 0.2434 0.4387 #>  #> Observation Matrix [C] #>                             f1      f2 #> ip_tot_cstr            -0.2450 -0.1850 #> new_cars               -0.0245 -0.0323 #> orders                 -0.1669 -0.1692 #> ret_turnover_defl      -0.0493  0.0062 #> ecs_ec_sent_ind        -0.2450 -0.4559 #> pms_pmi                -0.1196 -0.4508 #> urx                     0.3830 -0.1478 #> extra_ea_trade_exp_val -0.0568 -0.0847 #> euro325                -0.1207 -0.2317 #> raw_mat                -0.0968 -0.1707 #> gdp                    -0.3666 -0.0236 #> empl                   -0.3661  0.2945 #> capacity               -0.2730  0.1416 #> gdp_us                 -0.2194 -0.1953 #>  #> Observation Error Covariance Matrix [diag(R) - Restricted] #>            ip_tot_cstr               new_cars                 orders  #>                 0.6374                 0.9906                 0.7938  #>      ret_turnover_defl        ecs_ec_sent_ind                pms_pmi  #>                 0.9863                 0.3405                 0.3814  #>                    urx extra_ea_trade_exp_val                euro325  #>                 0.1861                 0.9708                 0.8215  #>                raw_mat                    gdp                   empl  #>                 0.9028                 0.4079                 0.1488  #>               capacity                 gdp_us  #>                 0.5644                 0.7362  #>  #> Observation Residual Covariance Matrix [cov(resid(DFM))] #>                        ip_tot_cstr  new_cars    orders ret_turnover_defl #> ip_tot_cstr                0.6126   -0.0151    0.1996*          -0.0168  #> new_cars                  -0.0151    0.9943   -0.0077            0.1269* #> orders                     0.1996*  -0.0077    0.7827            0.0342  #> ret_turnover_defl         -0.0168    0.1269*   0.0342            0.9885  #> ecs_ec_sent_ind           -0.0074   -0.0312   -0.0863*          -0.0018  #> pms_pmi                   -0.0591   -0.0482   -0.0184            0.0068  #> urx                        0.0104   -0.0190    0.0524           -0.0095  #> extra_ea_trade_exp_val     0.0737    0.0962    0.0760           -0.0145  #> euro325                   -0.0294    0.0543   -0.0896            0.0140  #> raw_mat                    0.0936    0.1054    0.0054            0.0392  #> gdp                       -0.0178   -0.0432   -0.0163            0.0624  #> empl                      -0.0335   -0.0505    0.0229            0.0005  #> capacity                  -0.0503   -0.0134   -0.0238           -0.0375  #> gdp_us                    -0.1565*   0.0034   -0.0046           -0.0659  #>                        ecs_ec_sent_ind   pms_pmi       urx #> ip_tot_cstr                   -0.0074   -0.0591    0.0104  #> new_cars                      -0.0312   -0.0482   -0.0190  #> orders                        -0.0863*  -0.0184    0.0524  #> ret_turnover_defl             -0.0018    0.0068   -0.0095  #> ecs_ec_sent_ind                0.2537   -0.0718*   0.0030  #> pms_pmi                       -0.0718*   0.3167    0.0291  #> urx                            0.0030    0.0291    0.1653  #> extra_ea_trade_exp_val        -0.0657*  -0.0426    0.0045  #> euro325                       -0.0290   -0.0365    0.0002  #> raw_mat                       -0.0451    0.0409    0.0336  #> gdp                           -0.0813*  -0.0211   -0.0020  #> empl                           0.0453*   0.0421    0.0066  #> capacity                      -0.0567   -0.0113    0.0380  #> gdp_us                        -0.1000*  -0.0293    0.0423  #>                        extra_ea_trade_exp_val   euro325   raw_mat       gdp #> ip_tot_cstr                           0.0737   -0.0294    0.0936   -0.0178  #> new_cars                              0.0962    0.0543    0.1054   -0.0432  #> orders                                0.0760   -0.0896    0.0054   -0.0163  #> ret_turnover_defl                    -0.0145    0.0140    0.0392    0.0624  #> ecs_ec_sent_ind                      -0.0657*  -0.0290   -0.0451   -0.0813* #> pms_pmi                              -0.0426   -0.0365    0.0409   -0.0211  #> urx                                   0.0045    0.0002    0.0336   -0.0020  #> extra_ea_trade_exp_val                0.9693    0.0141   -0.0336    0.0744  #> euro325                               0.0141    0.8026    0.0103   -0.0458  #> raw_mat                              -0.0336    0.0103    0.8897   -0.0561  #> gdp                                   0.0744   -0.0458   -0.0561    0.3798  #> empl                                 -0.0301    0.0173    0.0022   -0.0311  #> capacity                             -0.0421   -0.0023   -0.2376*   0.1283* #> gdp_us                               -0.0775    0.0616   -0.0399    0.0510  #>                             empl  capacity    gdp_us #> ip_tot_cstr             -0.0335   -0.0503   -0.1565* #> new_cars                -0.0505   -0.0134    0.0034  #> orders                   0.0229   -0.0238   -0.0046  #> ret_turnover_defl        0.0005   -0.0375   -0.0659  #> ecs_ec_sent_ind          0.0453*  -0.0567   -0.1000* #> pms_pmi                  0.0421   -0.0113   -0.0293  #> urx                      0.0066    0.0380    0.0423  #> extra_ea_trade_exp_val  -0.0301   -0.0421   -0.0775  #> euro325                  0.0173   -0.0023    0.0616  #> raw_mat                  0.0022   -0.2376*  -0.0399  #> gdp                     -0.0311    0.1283*   0.0510  #> empl                     0.1155   -0.0515*  -0.0259  #> capacity                -0.0515*   0.5558    0.1338* #> gdp_us                  -0.0259    0.1338*   0.7093  #>  #> Residual AR(1) Serial Correlation #>            ip_tot_cstr               new_cars                 orders  #>               -0.37927               -0.40846               -0.41429  #>      ret_turnover_defl        ecs_ec_sent_ind                pms_pmi  #>               -0.49173               -0.12364                0.09490  #>                    urx extra_ea_trade_exp_val                euro325  #>                0.01165               -0.52365                0.24452  #>                raw_mat                    gdp                   empl  #>                0.26723                     NA                     NA  #>               capacity                 gdp_us  #>                     NA                     NA  #>  #> Goodness of Fit: R-Squared #>            ip_tot_cstr               new_cars                 orders  #>                 0.3874                 0.0057                 0.2173  #>      ret_turnover_defl        ecs_ec_sent_ind                pms_pmi  #>                 0.0115                 0.7463                 0.6833  #>                    urx extra_ea_trade_exp_val                euro325  #>                 0.8347                 0.0307                 0.1974  #>                raw_mat                    gdp                   empl  #>                 0.1103                 0.6202                 0.8845  #>               capacity                 gdp_us  #>                 0.4442                 0.2907  #>  #> Summary of Individual R-Squared's #>    N    Mean  Median      SD     Min     Max #>   14  0.3903  0.3391  0.3146  0.0057  0.8845 plot(dfm_small)  # Factors and data  plot(dfm_small, method = \"all\", type = \"individual\") # Factor estimates  plot(dfm_small, type = \"residual\") # Residuals from factor predictions   # 10 periods ahead forecast plot(predict(dfm_small), xlim = c(300, 370))    ### Medium-Sized Model ---------------------------------  # IC for number of factors IC_medium = ICr(BM14[, BM14_Models$medium]) #> Missing values detected: imputing data with tsremimpNA() with default settings plot(IC_medium)  screeplot(IC_medium)   # I take 3 factors. Now number of lags VARselect(IC_medium$F_pca[, 1:3]) #> $selection #> AIC(n)  HQ(n)  SC(n) FPE(n)  #>      4      3      3      4  #>  #> $criteria #>                1         2         3         4         5         6         7 #> AIC(n)  2.874215  2.729238  2.523782  2.494297  2.501059  2.512466  2.530814 #> HQ(n)   2.935865  2.837126  2.677908  2.694661  2.747660  2.805305  2.869890 #> SC(n)   3.028004  2.998369  2.908255  2.994112  3.116215  3.242964  3.376653 #> FPE(n) 17.711606 15.321660 12.476772 12.115522 12.199726 12.342648 12.575329 #>                8         9        10 #> AIC(n)  2.536151  2.519114  2.547360 #> HQ(n)   2.921464  2.950665  3.025149 #> SC(n)   3.497332  3.595637  3.739225 #> FPE(n) 12.648100 12.441299 12.806492 #>   # Estimating the model with 3 factors and 3 lags dfm_medium = DFM(BM14[, BM14_Models$medium], 3, 3, em.method = \"BM\") #> Converged after 26 iterations.  # Inspecting the model summary(dfm_medium) #> Dynamic Factor Model: n = 48, T = 356, r = 3, p = 3, %NA = 32.6135 #>  #> Call:  DFM(X = BM14[, BM14_Models$medium], r = 3, p = 3, em.method = \"BM\") #>  #> Summary Statistics of Factors [F] #>       N     Mean   Median      SD      Min      Max #> f1  356   0.0403  -0.4214  2.9848  -5.4713  17.3578 #> f2  356  -0.0109  -0.2687  2.0526  -4.8352   8.2507 #> f3  356   0.0274    0.119  1.5727  -4.0181   6.8234 #>  #> Factor Transition Matrix [A] #>      L1.f1    L1.f2    L1.f3    L2.f1    L2.f2   L2.f3    L3.f1    L3.f2 #> f1 0.74619 -0.08633  0.28267  0.06055 0.045219 -0.1494  0.07457 -0.05102 #> f2 0.01289  0.40113 -0.04716  0.09857 0.104393 -0.1231  0.09578  0.24146 #> f3 0.14844  0.06662  0.41315 -0.01687 0.001667 -0.1762 -0.14472 -0.15933 #>      L3.f3 #> f1 0.06631 #> f2 0.02438 #> f3 0.15381 #>  #> Factor Covariance Matrix [cov(F)] #>           f1        f2        f3 #> f1   8.9091   -0.2889    0.2680  #> f2  -0.2889    4.2132   -0.0017  #> f3   0.2680   -0.0017    2.4733  #>  #> Factor Transition Error Covariance Matrix [Q] #>         u1      u2      u3 #> u1  2.1176 -1.1526 -0.3597 #> u2 -1.1526  1.9879  0.4395 #> u3 -0.3597  0.4395  2.0555 #>  #> Summary of Individual R-Squared's #>    N   Mean  Median      SD     Min     Max #>   48  0.381  0.3489  0.2986  0.0073  0.9311 plot(dfm_medium)  # Factors and data  plot(dfm_medium, method = \"all\", type = \"individual\") # Factor estimates  plot(dfm_medium, type = \"residual\") # Residuals from factor predictions   # 10 periods ahead forecast plot(predict(dfm_medium), xlim = c(300, 370))    ### Large Model --------------------------------- # \\donttest{ # IC for number of factors IC_large = ICr(BM14) #> Missing values detected: imputing data with tsremimpNA() with default settings plot(IC_large)  screeplot(IC_large)   # I take 6 factors. Now number of lags VARselect(IC_large$F_pca[, 1:6]) #> $selection #> AIC(n)  HQ(n)  SC(n) FPE(n)  #>      4      2      1      4  #>  #> $criteria #>                  1           2           3           4           5           6 #> AIC(n)    7.643796    7.389709    7.231934    7.213175    7.227360    7.270454 #> HQ(n)     7.859572    7.790436    7.817610    7.983802    8.182938    8.410983 #> SC(n)     8.182058    8.389338    8.692929    9.135537    9.611090   10.115551 #> FPE(n) 2087.777732 1619.851010 1384.538269 1360.880208 1383.738670 1449.967094 #>                  7           8           9          10 #> AIC(n)    7.379692    7.424074    7.542735    7.671673 #> HQ(n)     8.705171    8.934504    9.238116    9.552004 #> SC(n)    10.686156   11.191905   11.771933   12.362238 #> FPE(n) 1625.581824 1710.893843 1943.301686 2235.026114 #>   # Estimating the model with 6 factors and 3 lags dfm_large = DFM(BM14, 6, 3, em.method = \"BM\") #> Converged after 42 iterations.  # Inspecting the model summary(dfm_large) #> Dynamic Factor Model: n = 101, T = 356, r = 6, p = 3, %NA = 29.7363 #>  #> Call:  DFM(X = BM14, r = 6, p = 3, em.method = \"BM\") #>  #> Summary Statistics of Factors [F] #>       N     Mean   Median      SD       Min      Max #> f1  356   0.0128  -0.6589  4.8593  -12.1396  22.6273 #> f2  356  -0.1426   0.1953  3.2924  -13.4553  17.0049 #> f3  356  -0.0121   0.0539  2.6158  -10.0501    7.645 #> f4  356  -0.0532   -0.227  3.0551   -10.345  17.2138 #> f5  356   0.0526   0.0474  2.6591  -11.5097  10.8706 #> f6  356  -0.0074  -0.0276  2.3392   -8.0883  15.4214 #>  #> Factor Transition Matrix [A] #>      L1.f1    L1.f2     L1.f3    L1.f4    L1.f5    L1.f6    L2.f1    L2.f2 #> f1  0.4892  0.27413 -0.555373 -0.49350  0.33904  0.10227 -0.10721 -0.04923 #> f2  0.1409  0.42355 -0.119072  0.09760 -0.11595  0.14366 -0.19016 -0.06640 #> f3 -0.2769  0.06985  0.394982 -0.10002  0.12723 -0.11881  0.20734  0.04944 #> f4 -0.2432  0.03345 -0.085401 -0.18619  0.52093  0.04263  0.01735  0.17177 #> f5  0.2858 -0.01547  0.008841  0.40969  0.07289 -0.01797 -0.01169 -0.16386 #> f6  0.2178  0.12874 -0.113025  0.03033  0.09462  0.40510 -0.10945 -0.09195 #>       L2.f3    L2.f4    L2.f5    L2.f6     L3.f1    L3.f2     L3.f3     L3.f4 #> f1  0.23156 -0.14988 -0.06505 -0.50861  0.367040  0.11658 -0.070419  0.008798 #> f2  0.07793  0.07484 -0.21098 -0.19913 -0.091421  0.22904  0.008526  0.142987 #> f3 -0.32524 -0.23108  0.07323  0.10170  0.004843 -0.10569  0.186417 -0.121418 #> f4 -0.08269 -0.19694  0.05137 -0.11849  0.054295  0.13206  0.029156  0.100593 #> f5  0.12568 -0.01248 -0.15211  0.01158 -0.145431 -0.01864 -0.038644  0.038082 #> f6  0.11387  0.08252 -0.14040 -0.19996 -0.015064  0.05480  0.060205  0.111405 #>       L3.f5    L3.f6 #> f1  0.13116  0.02589 #> f2 -0.02080  0.17876 #> f3  0.12427 -0.03180 #> f4 -0.05662 -0.06638 #> f5  0.02519  0.18284 #> f6 -0.05736  0.10027 #>  #> Factor Covariance Matrix [cov(F)] #>           f1        f2        f3        f4        f5        f6 #> f1  23.6126    0.2329   -0.1166    4.0970*  -2.4727*   2.8984* #> f2   0.2329   10.8399   -1.8458*  -0.6389    1.1282*   2.1751* #> f3  -0.1166   -1.8458*   6.8426    1.6781*  -1.6056*  -1.2712* #> f4   4.0970*  -0.6389    1.6781*   9.3339   -4.2441*   0.0480  #> f5  -2.4727*   1.1282*  -1.6056*  -4.2441*   7.0708    0.6045  #> f6   2.8984*   2.1751*  -1.2712*   0.0480    0.6045    5.4720  #>  #> Factor Transition Error Covariance Matrix [Q] #>         u1      u2      u3      u4      u5      u6 #> u1  9.4291  0.3199  1.3015  2.2611 -2.0748 -0.0669 #> u2  0.3199  5.3107  0.0049 -0.8209  0.5604 -0.0135 #> u3  1.3015  0.0049  4.3942  0.5711 -0.4848  0.0342 #> u4  2.2611 -0.8209  0.5711  4.8600 -1.6002 -0.1788 #> u5 -2.0748  0.5604 -0.4848 -1.6002  4.4129  0.0902 #> u6 -0.0669 -0.0135  0.0342 -0.1788  0.0902  3.2699 #>  #> Summary of Individual R-Squared's #>     N    Mean  Median      SD     Min     Max #>   101  0.4677  0.4352  0.2929  0.0096  0.9984 plot(dfm_large)  # Factors and data  # plot(dfm_large, method = \"all\", type = \"individual\") # Factor estimates plot(dfm_large, type = \"residual\") # Residuals from factor predictions   # 10 periods ahead forecast plot(predict(dfm_large), xlim = c(300, 370))  # }"},{"path":"/reference/FIS.html","id":null,"dir":"Reference","previous_headings":"","what":"(Fast) Fixed-Interval Smoother (Kalman Smoother) — FIS","title":"(Fast) Fixed-Interval Smoother (Kalman Smoother) — FIS","text":"(Fast) Fixed-Interval Smoother (Kalman Smoother)","code":""},{"path":"/reference/FIS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Fast) Fixed-Interval Smoother (Kalman Smoother) — FIS","text":"","code":"FIS(A, F, F_pred, P, P_pred, F_0 = NULL, P_0 = NULL)"},{"path":"/reference/FIS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Fast) Fixed-Interval Smoother (Kalman Smoother) — FIS","text":"Transition matrix (\\(rp \\times rp\\)) F State estimates (\\(T \\times rp\\)) F_pred State predicted estimates (\\(T \\times rp\\)) P Variance estimates (\\(rp \\times rp \\times T\\)) P_pred Predicted variance estimates (\\(rp \\times rp \\times T\\)) F_0 Initial state vector (\\(rp \\times 1\\)) empty (NULL) P_0 Initial state covariance (\\(rp \\times rp\\)) empty (NULL)","code":""},{"path":"/reference/FIS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Fast) Fixed-Interval Smoother (Kalman Smoother) — FIS","text":"Smoothed state covariance estimates, including initial (t = 0) values.","code":""},{"path":"/reference/FIS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Fast) Fixed-Interval Smoother (Kalman Smoother) — FIS","text":"Kalman Smoother given : $$\\textbf{J}_t = \\textbf{P}_t \\textbf{} + inv(\\textbf{P}^{pred}_{t+1})$$ $$\\textbf{F}^{smooth}_t = \\textbf{F}_t + \\textbf{J}_t (\\textbf{F}^{smooth}_{t+1} - \\textbf{F}^{pred}_{t+1})$$ $$\\textbf{P}^{smooth}_t = \\textbf{P}_t + \\textbf{J}_t (\\textbf{P}^{smooth}_{t+1} - \\textbf{P}^{pred}_{t+1}) \\textbf{J}_t'$$ initial smoothed values period t = T set equal filtered values. F_0 P_0 supplied, smoothed initial conditions (t = 0 values) also calculated returned. details see textbook time series Shumway & Stoffer (2017), provide analogous R implementation astsa::Ksmooth0.","code":""},{"path":"/reference/FIS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"(Fast) Fixed-Interval Smoother (Kalman Smoother) — FIS","text":"Shumway, R. H., & Stoffer, D. S. (2017). Time Series Analysis Applications: R Examples. Springer. Harvey, . C. (1990). Forecasting, structural time series models Kalman filter.","code":""},{"path":[]},{"path":"/reference/ICr.html","id":null,"dir":"Reference","previous_headings":"","what":"Information Criteria to Determine the Number of Factors (r) — ICr","title":"Information Criteria to Determine the Number of Factors (r) — ICr","text":"Minimizes 3 information criteria proposed Bai Ng (2002) determine optimal number factors r* used approximate factor model. Screeplot can also computed eyeball number factors spirit Onatski (2010).","code":""},{"path":"/reference/ICr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information Criteria to Determine the Number of Factors (r) — ICr","text":"","code":"ICr(X, max.r = min(20, ncol(X) - 1))  # S3 method for ICr print(x, ...)  # S3 method for ICr plot(x, ...)  # S3 method for ICr screeplot(x, type = c(\"pve\", \"cum.pve\"), show.grid = TRUE, max.r = 30, ...)"},{"path":"/reference/ICr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information Criteria to Determine the Number of Factors (r) — ICr","text":"X T x n data matrix frame. max.r integer. maximum number factors IC computed (eigenvalues displayed screeplot). x object type 'ICr'. ... arguments ts.plot plot. type character. Either \"ev\" (eigenvalues), \"pve\" (percent variance explained), \"cum.pve\" (cumulative PVE). Multiple plots can requested. show.grid logical. TRUE shows gridlines plot.","code":""},{"path":"/reference/ICr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information Criteria to Determine the Number of Factors (r) — ICr","text":"list 4 elements: F_pca T x n matrix principle component factor estimates. eigenvalues eigenvalues covariance matrix X. IC r.max x 3 'table' containing 3 information criteria Bai Ng (2002), computed values r 1:r.max. r.star vector length 3 containing number factors (r) minimizing information criterion.","code":""},{"path":"/reference/ICr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Information Criteria to Determine the Number of Factors (r) — ICr","text":"Following Bai Ng (2002) De Valk et al. (2019), let NSSR(r) normalized sum squared residuals [= SSR(r) / (n x T)] r factors estimated using principal components. information criteria can written follows: $$IC_{r1} = \\ln(NSSR(r)) + r\\left(\\frac{n + T}{nT}\\right) + \\ln\\left(\\frac{nT}{n + T}\\right)$$ $$IC_{r2} = \\ln(NSSR(r)) + r\\left(\\frac{n + T}{nT}\\right) + \\ln(\\min(n, T))$$ $$IC_{r3} = \\ln(NSSR(r)) + r\\left(\\frac{\\ln(\\min(n, T))}{\\min(n, T)}\\right)$$ optimal number factors r* corresponds minimum IC. three criteria asymptotically equivalent, may give significantly different results finite samples. penalty \\(IC_{r2}\\) highest finite samples. Screeplot horizontal dashed line shown signifying eigenvalue 1, share variance corresponding 1 divided number eigenvalues.","code":""},{"path":"/reference/ICr.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Information Criteria to Determine the Number of Factors (r) — ICr","text":"determine number lags (p) factor transition equation, use function vars::VARselect r* principle components (also returned ICr).","code":""},{"path":"/reference/ICr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Information Criteria to Determine the Number of Factors (r) — ICr","text":"Bai, J., Ng, S. (2002). Determining Number Factors Approximate Factor Models. Econometrica, 70(1), 191-221. <doi:10.1111/1468-0262.00273> Onatski, . (2010). Determining number factors empirical distribution eigenvalues. Review Economics Statistics, 92(4), 1004-1016. De Valk, S., de Mattos, D., & Ferreira, P. (2019). Nowcasting: R package predicting economic variables using dynamic factor models. R Journal, 11(1), 230-244.","code":""},{"path":"/reference/SKF.html","id":null,"dir":"Reference","previous_headings":"","what":"(Fast) Stationary Kalman Filter — SKF","title":"(Fast) Stationary Kalman Filter — SKF","text":"simple fast C++ implementation Kalman Filter stationary data time-invariant system matrices missing data.","code":""},{"path":"/reference/SKF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Fast) Stationary Kalman Filter — SKF","text":"","code":"SKF(X, A, C, Q, R, F_0, P_0, loglik = FALSE)"},{"path":"/reference/SKF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Fast) Stationary Kalman Filter — SKF","text":"X Data matrix (\\(T \\times n\\)) Transition matrix (\\(rp \\times rp\\)) C Observation matrix (\\(n \\times rp\\)) Q State covariance (\\(rp \\times rp\\)) R Observation covariance (\\(n \\times n\\)) F_0 Initial state vector (\\(rp \\times 1\\)) P_0 Initial state covariance (\\(rp \\times rp\\)) loglik logical. Compute log-likelihood?","code":""},{"path":"/reference/SKF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Fast) Stationary Kalman Filter — SKF","text":"Predicted filtered state vectors covariances.","code":""},{"path":"/reference/SKF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Fast) Stationary Kalman Filter — SKF","text":"underlying state space model : $$\\textbf{x}_t = \\textbf{C} \\textbf{F}_t + \\textbf{e}_t \\tilde N(\\textbf{0}, \\textbf{R})$$ $$\\textbf{F}_t = \\textbf{F}_{t-1} + \\textbf{u}_t \\tilde N(0, \\textbf{Q})$$ \\(x_t\\) X[t, ]. filter first performs time update (prediction) $$\\textbf{F}_t = \\textbf{F}_{t-1}$$ $$\\textbf{P}_t = \\textbf{P}_{t-1}\\textbf{}' + \\textbf{Q}$$ \\(P_t = Cov(F_t)\\). followed measurement update (filtering) $$\\textbf{K}_t = \\textbf{P}_t \\textbf{C}' (\\textbf{C P}_t \\textbf{C}' + \\textbf{R})^{-1}$$ $$\\textbf{F}_t = \\textbf{F}_t + \\textbf{K}_t (\\textbf{x}_t - \\textbf{C F}_t)$$ $$\\textbf{P}_t = \\textbf{P}_t - \\textbf{K}_t\\textbf{C P}_t$$ row data missing measurement update skipped .e. prediction becomes filtered value. log-likelihood computed $$1/2 \\sum_t \\log(|St|)-e_t'S_te_t-n\\log(2\\pi)$$ \\(S_t = (C P_t C' + R)^{-1}\\) \\(e_t = x_t - C F_t\\) prediction error. details see textbook time series Shumway & Stoffer (2017), provide analogous R implementation astsa::Kfilter0. another fast (C-based) implementation also allows time-varying system matrices non-stationary data see FKF::fkf.","code":""},{"path":"/reference/SKF.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"(Fast) Stationary Kalman Filter — SKF","text":"Shumway, R. H., & Stoffer, D. S. (2017). Time Series Analysis Applications: R Examples. Springer. Harvey, . C. (1990). Forecasting, structural time series models Kalman filter. Hamilton, J. D. (1994). Time Series Analysis. Princeton university press.","code":""},{"path":[]},{"path":"/reference/SKFS.html","id":null,"dir":"Reference","previous_headings":"","what":"(Fast) Stationary Kalman Filter and Smoother — SKFS","title":"(Fast) Stationary Kalman Filter and Smoother — SKFS","text":"(Fast) Stationary Kalman Filter Smoother","code":""},{"path":"/reference/SKFS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Fast) Stationary Kalman Filter and Smoother — SKFS","text":"","code":"SKFS(X, A, C, Q, R, F_0, P_0, loglik = FALSE)"},{"path":"/reference/SKFS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Fast) Stationary Kalman Filter and Smoother — SKFS","text":"X Data matrix (\\(T \\times n\\)) Transition matrix (\\(rp \\times rp\\)) C Observation matrix (\\(n \\times rp\\)) Q State covariance (\\(rp \\times rp\\)) R Observation covariance (\\(n \\times n\\)) F_0 Initial state vector (\\(rp \\times 1\\)) P_0 Initial state covariance (\\(rp \\times rp\\)) loglik logical. Compute log-likelihood?","code":""},{"path":"/reference/SKFS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Fast) Stationary Kalman Filter and Smoother — SKFS","text":"results SKF FIS, additionally \\(rp \\times rp \\times T\\) matrix PPm_smooth, equal estimate \\(Cov(F^smooth_t, F^smooth_{t-1} | T)\\) needed EM iterations. See 'Property 6.3: Lag-One Covariance Smoother' Shumway & Stoffer (2017).","code":""},{"path":"/reference/SKFS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"(Fast) Stationary Kalman Filter and Smoother — SKFS","text":"Shumway, R. H., & Stoffer, D. S. (2017). Time Series Analysis Applications: R Examples. Springer.","code":""},{"path":[]},{"path":"/reference/ainv.html","id":null,"dir":"Reference","previous_headings":"","what":"Armadillo's Inverse Functions — ainv","title":"Armadillo's Inverse Functions — ainv","text":"Matrix inverse pseudo-inverse Armadillo C++ library.","code":""},{"path":"/reference/ainv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Armadillo's Inverse Functions — ainv","text":"","code":"ainv(x)  apinv(x)"},{"path":"/reference/ainv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Armadillo's Inverse Functions — ainv","text":"x numeric matrix, must square ainv.","code":""},{"path":"/reference/ainv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Armadillo's Inverse Functions — ainv","text":"matrix-inverse pseudo-inverse.","code":""},{"path":"/reference/as.data.frame.dfm.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Factor Estimates in a Data Frame — as.data.frame.dfm","title":"Extract Factor Estimates in a Data Frame — as.data.frame.dfm","text":"Extract Factor Estimates Data Frame","code":""},{"path":"/reference/as.data.frame.dfm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Factor Estimates in a Data Frame — as.data.frame.dfm","text":"","code":"# S3 method for dfm as.data.frame(   x,   ...,   method = \"all\",   pivot = c(\"long\", \"wide.factor\", \"wide.method\", \"wide\", \"t.wide\"),   time = seq_row(x$F_pca),   stringsAsFactors = TRUE )"},{"path":"/reference/as.data.frame.dfm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Factor Estimates in a Data Frame — as.data.frame.dfm","text":"x object class 'dfm'. ... used. method character. factor estimates use: \"qml\", \"twostep\", \"pca\" (multiple can supplied) \"\" estimates. pivot character. orientation frame: \"long\", \"wide.factor\" \"wide.method\", \"wide\" \"t.wide\". time vector identifying time dimension, NULL omit time variable. stringsAsFactors make factors method factor identifiers. option .data.frame.table.","code":""},{"path":"/reference/dot-VAR.html","id":null,"dir":"Reference","previous_headings":"","what":"(Fast) Barebones Vector-Autoregression — .VAR","title":"(Fast) Barebones Vector-Autoregression — .VAR","text":"Quickly estimate VAR(p) model using Armadillo's inverse function.","code":""},{"path":"/reference/dot-VAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Fast) Barebones Vector-Autoregression — .VAR","text":"","code":".VAR(x, p = 1L)"},{"path":"/reference/dot-VAR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Fast) Barebones Vector-Autoregression — .VAR","text":"x data matrix time series columns - without missing values. p integer. lag order VAR.","code":""},{"path":"/reference/dot-VAR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Fast) Barebones Vector-Autoregression — .VAR","text":"list containing matrices Y = x[-(1:p), ], X contains lags 1 - p x combined column-wise, \\(np \\times n\\) transition matrix, n number series x, VAR residual matrix res = Y - X %*% .","code":""},{"path":"/reference/em_converged.html","id":null,"dir":"Reference","previous_headings":"","what":"Convergence Test for EM-Algorithm — em_converged","title":"Convergence Test for EM-Algorithm — em_converged","text":"Convergence Test EM-Algorithm","code":""},{"path":"/reference/em_converged.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convergence Test for EM-Algorithm — em_converged","text":"","code":"em_converged(loglik, previous_loglik, tol = 1e-04, check.increased = TRUE)"},{"path":"/reference/em_converged.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convergence Test for EM-Algorithm — em_converged","text":"loglik current value log-likelihood function. previous_loglik value log-likelihood function previous iteration. tol numerical tolerance test. |LL(t) - LL(t-1)| / avg < tol, avg = (|LL(t)| + |LL(t-1)|)/2, algorithm converged. check.increased logical. Check likelihood increased.","code":""},{"path":"/reference/em_converged.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convergence Test for EM-Algorithm — em_converged","text":"logical statement indicating whether EM algorithm converged. check.increased = TRUE, vector 2 elements indicating convergence status whether likelihood decreased.","code":""},{"path":"/reference/plot.dfm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot DFM — plot.dfm","title":"Plot DFM — plot.dfm","text":"Plot DFM","code":""},{"path":"/reference/plot.dfm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot DFM — plot.dfm","text":"","code":"# S3 method for dfm plot(   x,   method = switch(x$em.method, none = \"twostep\", \"qml\"),   type = c(\"joint\", \"individual\", \"residual\"),   scale.factors = TRUE,   ... )  # S3 method for dfm screeplot(x, ...)"},{"path":"/reference/plot.dfm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot DFM — plot.dfm","text":"x object class 'dfm'. method character. factor estimates use: one \"qml\", \"twostep\", \"pca\" \"\" plot estimates. type character. type plot: \"joint\", \"individual\" \"residual\". scale.factors logical. Standardize factor estimates, usually improves plot since factor estimates corresponding greatest PCA eigenvalues tend greater variance data. ... plot.dfm: arguments plot, ts.plot, boxplot, depending type plot. screeplot.dfm: arguments screeplot.ICr.","code":""},{"path":"/reference/predict.dfm.html","id":null,"dir":"Reference","previous_headings":"","what":"DFM Forecasts — predict.dfm","title":"DFM Forecasts — predict.dfm","text":"function produces h-step ahead forecasts factors data, option also forecast autocorrelated residuals univariate method produce combined forecast.","code":""},{"path":"/reference/predict.dfm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DFM Forecasts — predict.dfm","text":"","code":"# S3 method for dfm predict(   object,   h = 10L,   method = switch(object$em.method, none = \"twostep\", \"qml\"),   standardized = TRUE,   resFUN = NULL,   resAC = 0.1,   ... )  # S3 method for dfm_forecast print(x, digits = 4L, ...)  # S3 method for dfm_forecast plot(   x,   main = paste(x$h, \"Period Ahead DFM Forecast\"),   xlab = \"Time\",   ylab = \"Standardized Data\",   factors = 1:ncol(x$F),   scale.factors = TRUE,   factor.col = rainbow(length(factors)),   factor.lwd = 1.5,   fcst.lty = \"dashed\",   data.col = c(\"grey85\", \"grey65\"),   legend = TRUE,   legend.items = paste0(\"f\", factors),   grid = FALSE,   vline = TRUE,   vline.lty = \"dotted\",   vline.col = \"black\",   ... )  # S3 method for dfm_forecast as.data.frame(   x,   ...,   use = c(\"factors\", \"data\", \"both\"),   pivot = c(\"long\", \"wide\"),   time = seq_len(nrow(x$F) + x$h),   stringsAsFactors = TRUE )"},{"path":"/reference/predict.dfm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DFM Forecasts — predict.dfm","text":"object object class 'dfm'. h integer. forecast horizon. method character. factor estimates use: one \"qml\", \"twostep\" \"pca\". standardized logical. FALSE return data forecasts original scale. resFUN (optional) function compute univariate forecast residuals. function needs second argument providing forecast horizon (h) return vector forecasts. See Examples. resAC numeric. Threshold residual autocorrelation apply resFUN: residual series AC1 > resAC forecasted. ... used. x object class 'dfm_forecast'. digits integer. number digits print . main, xlab, ylab character. Graphical parameters passed ts.plot. factors integers indicating factors display. Setting NA, NULL 0 omit factor plots. scale.factors logical. Standardize factor estimates, usually improves plot since factor estimates corresponding greatest PCA eigenvalues tend greater variance data. factor.col, factor.lwd graphical parameters affecting colour line width factor estimates plots. See par. fcst.lty integer character giving line type forecasts factors data. See par. data.col character vector length 2 indicating colours historical data forecasts data. Setting NA, NULL \"\" plot data data forecasts. legend logical. TRUE draws legend top-left chart. legend.items character names factors legend. grid logical. TRUE draws grid background plot. vline logical. TRUE draws vertical line deliminating historical data forecasts. vline.lty, vline.col graphical parameters affecting appearance vertical line. See par. use character. forecasts use \"factors\", \"data\" \"\". pivot character. orientation frame: \"long\" \"wide\". time vector identifying time dimension, must length T + h, NULL omit time variable. stringsAsFactors logical. TRUE pivot = \"long\" 'Variable' column created factor. option .data.frame.table.","code":""},{"path":"/reference/predict.dfm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DFM Forecasts — predict.dfm","text":"","code":"dfm <- DFM(diff(Seatbelts[, 1:7], lag = 12), 3, 3) #> Converged after 26 iterations. predict(dfm) #> 10 Step Ahead Forecast from Dynamic Factor Model #>  #> Factor Forecasts #>        f1     f2      f3 #> 1  1.9460 0.3967  0.3712 #> 2  1.5854 0.0333  0.1611 #> 3  1.1008 0.0733 -0.0051 #> 4  0.8366 0.0754 -0.0222 #> 5  0.5712 0.0577 -0.0593 #> 6  0.4423 0.0499 -0.0305 #> 7  0.3203 0.0456 -0.0135 #> 8  0.2492 0.0376  0.0111 #> 9  0.1874 0.0260  0.0257 #> 10 0.1429 0.0187  0.0368 #>  #> Series Forecasts #>    DriversKilled drivers  front   rear    kms PetrolPrice VanKilled #> 1         0.8302  1.0732 1.0180 0.7032 0.3802     -0.3165    0.3913 #> 2         0.6488  0.8477 0.8167 0.5682 0.3034     -0.3033    0.0059 #> 3         0.4291  0.5622 0.5452 0.3734 0.2209     -0.2953    0.0235 #> 4         0.3228  0.4229 0.4104 0.2798 0.1702     -0.2396    0.0322 #> 5         0.2122  0.2790 0.2725 0.1838 0.1194     -0.1935    0.0171 #> 6         0.1672  0.2193 0.2134 0.1444 0.0917     -0.1406    0.0221 #> 7         0.1228  0.1606 0.1557 0.1054 0.0664     -0.0977    0.0272 #> 8         0.0995  0.1296 0.1247 0.0852 0.0503     -0.0622    0.0285 #> 9         0.0780  0.1013 0.0968 0.0669 0.0366     -0.0350    0.0235 #> 10        0.0627  0.0811 0.0768 0.0537 0.0267     -0.0153    0.0210 fcfun <- function(x, h) predict(ar(x), n.ahead = h)$pred predict(dfm, resFUN = fcfun) #> 10 Step Ahead Forecast from Dynamic Factor Model #>  #> Factor Forecasts #>        f1     f2      f3 #> 1  1.9460 0.3967  0.3712 #> 2  1.5854 0.0333  0.1611 #> 3  1.1008 0.0733 -0.0051 #> 4  0.8366 0.0754 -0.0222 #> 5  0.5712 0.0577 -0.0593 #> 6  0.4423 0.0499 -0.0305 #> 7  0.3203 0.0456 -0.0135 #> 8  0.2492 0.0376  0.0111 #> 9  0.1874 0.0260  0.0257 #> 10 0.1429 0.0187  0.0368 #>  #> Series Forecasts #>    DriversKilled drivers  front    rear     kms PetrolPrice VanKilled #> 1         0.8302  1.0732 1.0180  0.7391  0.7658     -0.3181    0.3913 #> 2         0.6488  0.8477 0.8167  0.8697  0.5170     -0.2851    0.0059 #> 3         0.4291  0.5622 0.5452  0.3129  0.7226     -0.3393    0.0235 #> 4         0.3228  0.4229 0.4104  0.1316 -0.3464     -0.2034    0.0322 #> 5         0.2122  0.2790 0.2725  0.4248  0.2259     -0.2155    0.0171 #> 6         0.1672  0.2193 0.2134 -0.3303  0.1182     -0.1349    0.0221 #> 7         0.1228  0.1606 0.1557  0.3344  0.2050     -0.0916    0.0272 #> 8         0.0995  0.1296 0.1247 -0.3911  0.1850     -0.0876    0.0285 #> 9         0.0780  0.1013 0.0968  0.5414 -0.3656     -0.0048    0.0235 #> 10        0.0627  0.0811 0.0768  0.7651  0.0926     -0.0260    0.0210"},{"path":"/reference/residuals.dfm.html","id":null,"dir":"Reference","previous_headings":"","what":"DFM Residuals and Fitted Values — residuals.dfm","title":"DFM Residuals and Fitted Values — residuals.dfm","text":"DFM Residuals Fitted Values","code":""},{"path":"/reference/residuals.dfm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DFM Residuals and Fitted Values — residuals.dfm","text":"","code":"# S3 method for dfm residuals(   object,   method = switch(object$em.method, none = \"twostep\", \"qml\"),   orig.format = FALSE,   standardized = FALSE,   ... )  # S3 method for dfm fitted(   object,   method = switch(object$em.method, none = \"twostep\", \"qml\"),   orig.format = FALSE,   standardized = FALSE,   ... )"},{"path":"/reference/residuals.dfm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DFM Residuals and Fitted Values — residuals.dfm","text":"object object class 'dfm'. method character. factor estimates use: one \"qml\", \"twostep\" \"pca\". orig.format logical. TRUE returns residuals/fitted values data format similar X. standardized logical. FALSE put residuals/fitted values original data scale. ... used.","code":""},{"path":"/reference/summary.dfm.html","id":null,"dir":"Reference","previous_headings":"","what":"DFM Summary Methods — summary.dfm","title":"DFM Summary Methods — summary.dfm","text":"Summary print methods class 'dfm'. print.dfm just prints basic model information factor transition matrix [], summary.dfm returns system matrices additional residual goodness fit statistics - print method allowing full compact printout.","code":""},{"path":"/reference/summary.dfm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DFM Summary Methods — summary.dfm","text":"","code":"# S3 method for dfm print(x, digits = 4L, ...)  # S3 method for dfm summary(   object,   method = switch(object$em.method, none = \"twostep\", \"qml\"),   ... )  # S3 method for dfm_summary print(x, digits = 4L, compact = sum(x$info[\"n\"] > 15, x$info[\"n\"] > 40), ...)"},{"path":"/reference/summary.dfm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DFM Summary Methods — summary.dfm","text":"x, object object class 'dfm'. digits integer. number digits print . ... used. method character. factor estimates use: one \"qml\", \"twostep\" \"pca\". compact integer. Display compact printout: 0 prints everything, 1 omits observation matrix [C] covariance matrix [R], 2 omits disaggregated information - yielding summary factor estimates.","code":""},{"path":"/reference/summary.dfm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DFM Summary Methods — summary.dfm","text":"Summary information following dynamic factor model estimation.","code":""},{"path":"/reference/tsremimpNA.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove and Impute Missing Values in a Multivariate Time Series — tsremimpNA","title":"Remove and Impute Missing Values in a Multivariate Time Series — tsremimpNA","text":"function imputes missing (infinite) values stationary multivariate time series using various methods, removes cases many missing values.","code":""},{"path":"/reference/tsremimpNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove and Impute Missing Values in a Multivariate Time Series — tsremimpNA","text":"","code":"tsremimpNA(   X,   max.missing = 0.5,   na.rm.method = c(\"LE\", \"all\"),   na.impute = c(\"median\", \"rnorm\", \"median.ma\", \"median.ma.spline\"),   ma.terms = 3L )"},{"path":"/reference/tsremimpNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove and Impute Missing Values in a Multivariate Time Series — tsremimpNA","text":"X matrix multivariate time series column series. max.missing numeric. Proportion series missing case considered missing. na.rm.method character. Method apply concerning missing cases selected max.missing: \"LE\" removes cases beginning end sample, whereas \"\" always removes missing cases. na.impute character. Method impute missing values PCA estimates used initialize EM algorithm. Note data standardized (scaled centered) beforehand. Available options : ma.terms order (2-sided) moving average applied na.impute methods \"median.ma\" \"median.ma.spline\".","code":""},{"path":"/reference/tsremimpNA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove and Impute Missing Values in a Multivariate Time Series — tsremimpNA","text":"list imputed matrix X_imp, missingness matrix W matching dimensions X_imp, vector cases na.rm indicating cases many missing values removed beforehand.","code":""}]
